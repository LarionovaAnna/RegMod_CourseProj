cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(pack_sum, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filer(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(stedents2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 34, seconds = 55)
this_moment
nyx <- now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
exit
0
getwd()
clear()
# Loads RDS
NEI <- readRDS("data/summarySCC_PM25.rds")
SCC <- readRDS("data/Source_Classification_Code.rds")
# Loads RDS
NEI <- readRDS("/summarySCC_PM25.rds")
SCC <- readRDS("/Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")
# Loads RDS
SCC <- readRDS("Source_Classification_Code.rds")
aggregatedTotalByYear <- aggregate(Emissions ~ year, NEI, sum)
aggregatedTotalByYear
png('plot1.png')
barplot(height = aggregatedTotalByYear$Emissions,
names.arg = aggregatedTotalByYear$year,
xlab="years", ylab=expression('total PM'[2.5]*' emission'),
main=expression('Total PM'[2.5]*' emissions at various years'))
dev.off()
subNEI <- NEI[NEI$fips=="24510", ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subNEI, sum)
# Create plot
png('plot2.png')
barplot(height = aggregatedTotalByYear$Emissions,
names.arg = aggregatedTotalByYear$year,
xlab = "years", ylab=expression('total PM'[2.5]*' emission'),
main = expression('Total PM'[2.5]*' in the Baltimore City, MD emissions at various years'))
dev.off()
aggregatedTotalByYearAndType <- aggregate(Emissions ~ year + type, subNEI, sum)
# Create plot
png("plot3.png", width = 640, height = 480)
g <- ggplot(aggregatedTotalByYearAndType, aes(year, Emissions, color = type))
g <- g + geom_line() +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions in Baltimore City, Maryland (fips == "24510") from 1999 to 2008')
print(g)
dev.off()
library(ggplot2)
aggregatedTotalByYearAndType <- aggregate(Emissions ~ year + type, subNEI, sum)
# Create plot
png("plot3.png", width = 640, height = 480)
g <- ggplot(aggregatedTotalByYearAndType, aes(year, Emissions, color = type))
g <- g + geom_line() +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions in Baltimore City, Maryland (fips == "24510") from 1999 to 2008')
print(g)
dev.off()
#Create new dataset
NEISCC <- merge(NEI, SCC, by="SCC")
#Find records with Short.Name (SCC) Coal
coalMatches  <- grepl("coal", NEISCC$Short.Name, ignore.case=TRUE)
subsetNEISCC <- NEISCC[coalMatches, ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subsetNEISCC, sum)
# Create plot
png("plot4.png", width = 640, height = 480)
g <- ggplot(aggregatedTotalByYear, aes(factor(year), Emissions))
g <- g + geom_bar(stat = "identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from coal sources from 1999 to 2008')
print(g)
dev.off()
subNEI <- NEI[NEI$fips=="24510" & NEI$type=="ON-ROAD",  ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subNEI, sum)
# Create plot
png("plot5.png", width = 840, height = 480)
g <- ggplot(aggregatedTotalByYear, aes(factor(year), Emissions))
g <- g + geom_bar(stat = "identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type = ON-ROAD) in Baltimore City, Maryland (fips = "24510") from 1999 to 2008')
print(g)
subNEI <- NEI[NEI$fips=="24510" & NEI$type=="ON-ROAD",  ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subNEI, sum)
# Create plot
png("plot5.png", width = 840, height = 480)
g <- ggplot(aggregatedTotalByYear, aes(factor(year), Emissions))
g <- g + geom_bar(stat = "identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type = ON-ROAD) in Baltimore City, Maryland (fips = "24510") from 1999 to 2008')
print(g)
dev.off()
subsetNEI <- NEI[NEI$fips=="24510" & NEI$type=="ON-ROAD",  ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subsetNEI, sum)
png("plot5.png", width=840, height=480)
g <- ggplot(aggregatedTotalByYear, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type = ON-ROAD) in Baltimore City, Maryland (fips = "24510") from 1999 to 2008')
print(g)
dev.off()
#Find for ON-ROAD type in NEI
subsetNEI <- NEI[(NEI$fips=="24510"|NEI$fips=="06037") & NEI$type=="ON-ROAD",  ]
aggregatedTotalByYearAndFips <- aggregate(Emissions ~ year + fips, subsetNEI, sum)
aggregatedTotalByYearAndFips$fips[aggregatedTotalByYearAndFips$fips=="24510"] <- "Baltimore, MD"
aggregatedTotalByYearAndFips$fips[aggregatedTotalByYearAndFips$fips=="06037"] <- "Los Angeles, CA"
# Create plot
png("plot6.png", width=1040, height=480)
g <- ggplot(aggregatedTotalByYearAndFips, aes(factor(year), Emissions))
g <- g + facet_grid(. ~ fips)
g <- g + geom_bar(stat="identity")  +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle (type=ON-ROAD) in Baltimore City, MD (fips = "24510") vs Los Angeles, CA (fips = "06037")  1999-2008')
print(g)
dev.off()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
12/11
1-(2+1)/36
deck
1/52
52
4/52
0
12/52
2/51
0.64
0.64
mypdf
integrate(mypdf, 0, 1.6)
0.5
x^2=4*.5=2
1.41
info()
4*.5
1.414214
install.package("swirl")
install.packages("swirl")
library(swirl)
swirl()
t.test(difference)
t.test(difference)$conf.int
sp <- (7)*15.34^2+20*18.23^2
ns <- 27
sp <- sqrt(sp / ns)
(132.86-127.44) + c(-1,1)*qt(.975, ns) * sp*sqrt(1/8+1/21)
132.86-127.44 + c(-1,1)*qt(.975, ns) * sp*sqrt(1/8+1/21)
sp <- sqrt(var(g1)+var(g2)/18)
sp <- sqrt(9*var(g1)+9*var(g2)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sqrt(1/10+1/10)*sp+c(-1,1)*qt(0.975,18)*sp*sqrt(1/10+1/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2, g1, paired = FALSE)$conf
t.test(g2, g1, paired = FALSE, var.equal=TRUE)$conf
t.test(g2, g1, paired = TRUE, var.equal=TRUE)$conf
t.test(g2, g1, paired = TRUE)$conf
((15.34^2/8 + 18.23^2/21)^2)/(((15.34^2/8)^2)/7 + ((18.23^2/21)^2)/20)
num <- (15.34^2/8 + 18.23^2/21)^2
den <- ((15.34^2/8)^2)/7 + ((18.23^2/21)^2)/20
mydf <- num/den
132.86 - 127.44 + c(-1,1) * qt(.975, mydf) * sqrt(15.34^2/7 + 18.23^2/20)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
(32-30)/1
(32-30)/(10/sqrt(16))
15
qt(.95,15)
dim(fs)
t.test(fs$sheight, fs$fheight, paired = TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
mybin[8]
mybin[7]
7
mybin[7,8]
mybin[7;8]
mybin[7:8]
mybin[7]=.144 and mybin[8]=.035
mybin[7]=.144 & mybin[8]=.035
mybin[7]=.144 | mybin[8]=.035
8
library(swirl)
swirl()
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(.975)
qnorm(.95)
qnorm(.99)
pnorm(2, lower.tail=TRUE)
pnorm(2, lower.tail=FALSE)
mybin
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9, 5, lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,sd=1,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type =
| "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pvalues)
head(pValues)
sum(pValues >.05)
sum(pValues <.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(pValue2)
tail(pValues2)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
24/524
24/500
table(pValues2 < 0.05, trueStatus)
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3
sum(1\:6)/6
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
meds - median(fh)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
qt(resampledMedians, c(.025,.975))
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
Cdata$count - Bdata$count
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts,sample(group)))
bye()
data(mtcars)
head(mtcars)
fit <- lm(mpg ~ wt)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
sd_of_x <- 0.5
cor <- 0.5
mn <- 0
vr <- 1
corr <- 0.4
q1sc <- 0.5
q1sc <- 1.5
q1sc * corr * vr + mn
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x)) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)$coef
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(swirl)
install_from_swirl("Regression Models")
rm(list=ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
library(swirl)
swirl()
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
find.package("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
remove.packages(c("git2r", "devtools", "rversions")).
remove.packages(c("git2r", "devtools", "rversions"))
install.packages("devtools.zip", repos = NULL, type = "source")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools.zip", repos=Null)
install.packages("C:/Documents and Settings/Администратор/devtools.zip", repos=Null)
install.packages("C:/Documents and Settings/Администратор/devtools.zip", repos=NULL)
library(devtools)
utils::installed.packages
find.package("devtools")
library(devtools)
getwd()
setwd("C:\Documents and Settings\Администратор\RegMod_CourseProj")
setwd("C:/Documents and Settings/Администратор/RegMod_CourseProj")
##Introduction
###Looking at a data set of a collection of cars, we are interested in exploring the relationship between a set of variables and miles per gallon (MPG) (outcome). We will be using the mtcars dataset in R to do our analysis. We will be trying to answer the following questions:
###  “Is an automatic or manual transmission better for MPG”
###“Quantify the MPG difference between automatic and manual transmissions”
##Executive Summary
###A simple model was first designed (mpg ~ factor(am)) to answer the question being asked. But since we found the R squared to be low and other variables in the data set having linear relationship with mpg we designed a multivariate regression model that ultimately increased the R squared value to 83.4%. The final verdict being manual transmission being better for MPG than automatic. 1.8 is the estimated expected increase in miles per gallon when compared manual transmission to automatic transmission.
##Analysis
data("mtcars")
library(ggplot2)
library(car)
head(mtcars)
###the am variable stores the data for transmission (0 = automatic, 1 = manual)
###creating boxplot to understand effect of transmission on mpg
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = factor(am))) +
geom_boxplot() + ggtitle("Analyzing mpg ~ am data")
###there is a positive effect on mpg in cars with manual transmission
##fit the simple linear model with am
fit <- lm(mpg ~ as.factor(am), data = mtcars)
coef(summary(fit))
###coefficient of manual transmission have value 7.24 as expected increase in miles per gallon when compared manual transmission to automatic transmission. So our basic model answers the first question positively. But if we look at the Adjuster R-squared value we will see that it is pretty low (34%), and the explanation of variance low as well. Plot2 in apendix shows that there are more variables that have linear relationship to mpg. Let's try to see which variable has big variance inflation factor (vif). First we add all variables to new model.
fit_all <- lm(mpg ~ ., data = mtcars)
sqrt(vif(fit_all))
###Here we find that am variable actually is not that very significant, however we leave it be in our model together with weight (wt), disp, cyl, hp.
fit2 <- lm(mpg ~ factor(cyl) + disp + hp + wt + factor(am), data = mtcars)
summary(fit2)
###Now adjuster R-squared is 83%, the model do better than the previous one after we added more variables in it. We can use anova to see whether our multivariable model (fit2) is better than the simple model (fit)
anova(fit, fit2)
###low p-value does signify that the final model is a good fit.We run a diagnostic to be doubly sure
influence.measures(fit2)
###Residual plots are in Appendix. A pattern less residual plot signifies a good fit.
###
##Appendix
g
pairs(mtcars, panel = panel.smooth, main = "Pair graph of car variables")
par(mfrow = c(2,2))
plot(fit2)
